plugins{
    id "base"
    id "nl.eleven.node-gradle.node" version "1.0.0"
    id "com.google.osdetector" version "1.7.0"
    id "com.github.rmee.kubectl" version "1.1.20200614081240"
    id "com.github.rmee.helm" version "1.1.20200614081240"
    id "com.github.rmee.gcloud" version "1.1.20200614081240"
    id "com.palantir.docker" version "0.28.0"
    id "com.palantir.docker-run" version "0.28.0"
}

project.version = "1.0.0-SNAPSHOT"


var nodeVersion = "16.8.0"
var imageId = "gcr.io/saludantofagasta-proy1/$project.name:$project.version"
var zona = System.getenv("API_ZONE")
var cluster = System.getenv("API_CLUSTER")


node {
    download true
    version nodeVersion
}


docker {
    name imageId
    files fileTree("$project.buildDir/node")
}

dockerRun {
    name  "mongo"
    image "mongo:5.0"
    ports  "27017:27017"
    daemonize true
    ignoreExitValue true
}

String testsExecutedMarkerName = "${projectDir}/.tests.executed"
String runningMongo = "${projectDir}/.tests.mongo"

tasks.named("dockerRemoveContainer"){t-> t.dependsOn(dockerStop)}

tasks.named("dockerRun"){t->
    {
        t.doLast {
            new File(runningMongo).text = "Running mongo"
        }
        t.outputs.file runningMongo
    }
}

task startMongo {
    dependsOn "dockerRun"
    outputs.file runningMongo
}

task stopMongo {
    dependsOn dockerRemoveContainer

    doLast {
        delete runningMongo
    }
}

task test(type: NpmTask) {
    dependsOn npmInstall, startMongo
    environment CI: 'true'

    args = ['run', 'test', '--ci']

    inputs.files fileTree('api')
    inputs.files fileTree('test')
    inputs.file 'package.json'
    inputs.file 'package-lock.json'

    doLast {
        new File(testsExecutedMarkerName).text = 'delete this file to force re-execution JavaScript tests'
    }

    outputs.file testsExecutedMarkerName
}

task apiBuild(type: NodeTask) {
    inputs.files fileTree('api')

    script = file("build.js")
    args = [ "$project.projectDir/api/app.js","$project.buildDir/node"]

    outputs.file "$project.buildDir/node/app.js";
}

task gcrLogin(type:Exec){
    commandLine "docker", "login", "-u", "_json_key", "--password-stdin", "https://gcr.io"
    standardInput new BufferedInputStream(new FileInputStream("key.json"))
}

dockerfileZip.dependsOn test
apiBuild.dependsOn test
dockerPrepare.dependsOn apiBuild
docker.dependsOn test, apiBuild
assemble.dependsOn "docker"
clean.dependsOn stopMongo
dockerPush.dependsOn build, gcrLogin

gcloud {
    cli {
        imageName = 'google/cloud-sdk'
        imageTag = '352.0.0'
    }

    keyFile = file("$projectDir/key.json")
    zone = zona
    project = "saludantofagasta-proy1"

    gke {
        clusterName =  cluster
    }
}

gcloudSetProject.dependsOn gcloudActivateServiceAccount
gcloudGetKubernetesCredentials.dependsOn gcloudSetProject

task deployQA() {
    dependsOn dockerPush,gcloudGetKubernetesCredentials, helmPackage
    doFirst {
        kubectl.exec({ commandLine = "kubectl apply -f=${file('kubernetes/ .yaml')}" })

        File yamlFile = file("build/helm/crnk-example.yaml")
        yamlFile.parentFile.mkdirs()

        helm.exec({
            commandLine = "helm template --name=crnk --set image.tag=${imageId} ${helmPackageCrnkExample.outputs.files.singleFile} --namespace=default"
            stdoutFile = yamlFile
        })

        kubectl.exec({ commandLine = "kubectl apply -f=${yamlFile} -n=default" })
    }
}




clean {
    delete testsExecutedMarkerName
}

task echo {
    dependsOn gcloudGetKubernetesCredentials
    doLast {
        kubectl.exec({commandLine = "kubectl config get-contexts"})
    }
}